import React from 'react';
import {
    StyleSheet,
    Text,
    View,
    FlatList,
    Dimensions,
    TouchableOpacity,
    Image,
    Modal,
    ScrollView,
    Alert
} from 'react-native';

/*this is a react native version of this code https://github.com/Expertizo/react-fb-image-grid*/

export default class Members extends React.Component {

    constructor(props) {
        super(props);
        this.state = {
            countFrom: 5,
            conditionalRender: false,
            images: [
                "https://avatars0.githubusercontent.com/u/43845261?s=460&u=f2a3bf854903ca7e009cdf1449ea9cff1d80f2fd&v=4",
                "./images/2.jpg",
                "./images/3.jpg",
                "./images/4.jpg",
                "./images/5.jpg",
                "./images/6.jpg",

            ]
        };
    }

    clickEventListener = () => {
        Alert.alert('Alert', 'image clicked');
    }

    renderOne() {
        const { images } = this.state;
        const { countFrom } = this.state;
        return (
            <View style={styles.row}>
                <TouchableOpacity style={[styles.imageContent, styles.imageContent1]} onPress={() => { this.clickEventListener() }}>
                    <Image style={styles.image} source={{ uri: images[0] }} />
                </TouchableOpacity>
            </View>
        );
    }

    renderTwo() {
        const { images } = this.state;
        const { countFrom } = this.state;
        const conditionalRender = [3, 4].includes(images.length) || images.length > +countFrom && [3, 4].includes(+countFrom);

        return (
            <View style={styles.row}>
                <TouchableOpacity style={[styles.imageContent, styles.imageContent2]} onPress={() => { this.clickEventListener() }}>
                    <Image style={styles.image} source={{ uri: (conditionalRender) ? images[1] : images[0] }} />
                </TouchableOpacity>
                <TouchableOpacity style={[styles.imageContent, styles.imageContent2]} onPress={() => { this.clickEventListener() }}>
                    <Image style={styles.image} source={{ uri: (conditionalRender) ? images[2] : images[1] }} />
                </TouchableOpacity>
            </View>
        );
    }

    renderThree() {
        const { images } = this.state;
        const { countFrom } = this.state;
        const overlay = !countFrom || countFrom > 5 || images.length > countFrom && [4, 5].includes(+countFrom) ? this.renderCountOverlay(true) : this.renderOverlay();
        const conditionalRender = images.length == 4 || images.length > +countFrom && +countFrom == 4;

        return (
            <View style={styles.row}>
                <TouchableOpacity style={[styles.imageContent, styles.imageContent3]} onPress={() => { this.clickEventListener() }}>
                    <Image style={styles.image} source={{ uri: (conditionalRender) ? images[1] : images[2] }} />
                </TouchableOpacity>
                <TouchableOpacity style={[styles.imageContent, styles.imageContent3]} onPress={() => { this.clickEventListener() }}>
                    <Image style={styles.image} source={{ uri: (conditionalRender) ? images[2] : images[3] }} />
                </TouchableOpacity>
                {overlay}
            </View>
        );
    }

    renderOverlay() {
        const { images } = this.state;
        return (
            <TouchableOpacity style={[styles.imageContent, styles.imageContent3]} onPress={() => { this.clickEventListener() }}>
                <Image style={styles.image} source={{ uri: images[images.length - 1] }} />
            </TouchableOpacity>
        );
    }

    renderCountOverlay(more) {
        const { images } = this.state;
        const { countFrom } = this.state;
        const extra = images.length - (countFrom && countFrom > 5 ? 5 : countFrom);
        const conditionalRender = images.length == 4 || images.length > +countFrom && +countFrom == 4;
        return (
            <TouchableOpacity style={[styles.imageContent, styles.imageContent3]} onPress={() => { this.clickEventListener() }}>
                <Image style={styles.image} source={{ uri: (conditionalRender) ? images[3] : images[4] }} />
                <View style={styles.overlayContent}>
                    <View>
                        <Text style={styles.count}>+{extra}</Text>
                    </View>
                </View>
            </TouchableOpacity>
        );
    }

    render() {
        const { modal, index, countFrom } = this.state;
        const { images } = this.state;
        const imagesToShow = [...images];

        if (countFrom && images.length > countFrom) {
            imagesToShow.length = countFrom;
        }

        return (
            <View style={styles.container}>
                {[1, 3, 4].includes(imagesToShow.length) && this.renderOne()}
                {imagesToShow.length >= 2 && imagesToShow.length != 4 && this.renderTwo()}
                {imagesToShow.length >= 4 && this.renderThree()}
            </View>
        );
    }
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        marginVertical: 20,
    },
    row: {
        flexDirection: 'row'
    },
    imageContent: {
        borderWidth: 1,
        borderColor: 'black',
        height: 120,
    },
    imageContent1: {
        width: '100%'
    },
    imageContent2: {
        width: '50%',
    },
    imageContent3: {
        width: '33.33%',
    },
    image: {
        width: '100%',
        height: '100%',
    },
    //overlay efect
    overlayContent: {
        flex: 1,
        position: 'absolute',
        zIndex: 100,
        right: 0,
        width: '100%',
        height: '100%',
        backgroundColor: 'rgba(0, 0, 0, 0.5)',
        justifyContent: 'center',
        alignItems: 'center'
    },
    count: {
        fontSize: 50,
        color: "#ffffff",
        fontWeight: 'bold',
        textShadowColor: 'rgba(0, 0, 139, 1)',
        textShadowOffset: { width: -1, height: 1 },
        textShadowRadius: 10
    },
});  


import React, { Component } from 'react';
import {
    StyleSheet,
    View,
    FlatList,
    ActivityIndicator,
    Image,
    TouchableOpacity,
    ScrollView
} from 'react-native';
import styles from './styles';
import { Dimensions } from "react-native";


//import all the components we will need

export default class Members extends Component {
    constructor() {
        super();
        this.state = {
            dataSource: {},
        };
    }
    constructor2() {
        //super();
        this.state = { screenWidth: "" }
    }
    getScreenSize = () => {
        const screenWidth = Math.round(Dimensions.get('window').width);
        this.setState({ screenWidth: screenWidth })
    }
    componentDidMount() {
        var that = this;
        let items = Array.apply(null, Array(25)).map((v, i) => {
            return { id: i, src: 'https://avatars0.githubusercontent.com/u/43845261?s=460&u=f2a3bf854903ca7e009cdf1449ea9cff1d80f2fd&v=4'/*`./images/${i + 1}.jpg`*/ };
        });
        that.setState({
            dataSource: items,
        });
    }
    render() {
        return (
            <View style={styles.MainContainer}>
                <FlatList

                    data={this.state.dataSource}
                    renderItem={({ item }) => (
                        <View style={{ flex: 1, flexDirection: 'row', margin: 2 }}>
                            <Image style={styles.imageThumbnail} source={{ uri: item.src }} />
                        </View>
                    )}
                    //Setting the number of column
                    //numColumns={20}

                    //numColumns={this.state.screenWidth / 61}

                    keyExtractor={item => item.id/*(item, index) => index.toString()*/}
                />
            </View>
        );
    }
}






https://stackoverflow.com/questions/37841236/render-images-sources-from-parsed-array-of-objects-in-react-native/37842164

https://stackoverflow.com/questions/48214407/grid-view-of-images-inside-a-scrollview-react-native




"images": [
        "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4",
        "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4",
        "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4",
        "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
    ],
    "profiles": [
        "https://github.com/aayush-05",
        "https://github.com/Abdelaty",
        "https://github.com/adi-001",
        "https://github.com/aditmehta9"
    ]











import React, { Component } from 'react';
import {
    StyleSheet,
    View,
    Text,
    FlatList,
    ActivityIndicator,
    Image,
    Linking,
    TouchableHighlight,
    ScrollView
} from 'react-native';
import styles from './styles';
import { Dimensions } from "react-native";
import Details from './Data.js';



//import all the components we will need

export default class Members extends Component {
    constructor() {
        super();
        this.state = {
            dataSource: {},
        };
    }
    constructor2() {
        //super();
        this.state = { screenWidth: "" }
    }
    getScreenSize = () => {
        const screenWidth = Math.round(Dimensions.get('window').width);
        this.setState({ screenWidth: screenWidth })
    }
    componentDidMount() {
        var that = this;
        let items = Array.apply(null, Array(25)).map((v, i) => {
            return { id: i, src: 'https://avatars1.githubusercontent.com/u/42520146?s=400&u=a64745b8570c25a709ec1bcb08fba621732ee017&v=4'/*`./images/${i + 1}.jpg`*/ };
        });
        that.setState({
            dataSource: items,
        });
    }
    render() {
        return (
            <View style={styles.MainContainer}>
                <FlatList
                    contentContainerStyle={styles.list}
                    data={this.state.dataSource}
                    renderItem={({ item }) => (
                        <View style={{ flex: 1, margin: 2 }}>
                            <TouchableHighlight
                                style={styles.link}
                                underlayColor='transparent'
                                accessible={true}
                                onPress={() => Linking.openURL('https://anitab.org/about-us/about-anita-borg/')}
                            >
                                <Image style={styles.imageThumbnail} source={{ uri: item.src }} />
                            </TouchableHighlight>

                        </View>
                    )}
                    //Setting the number of column
                    //numColumns={20}

                    //numColumns={this.state.screenWidth / 61}

                    keyExtractor={item => item.id/*(item, index) => index.toString()*/}
                />
            </View>
        );
    }
}





{
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            },
            {
                profile: "https://github.com/adi-001",
                image: "https://avatars3.githubusercontent.com/u/47720423?s=96&v=4"
            },
            {
                profile: "https://github.com/aditmehta9",
                image: "https://avatars2.githubusercontent.com/u/35133994?s=96&v=4"
            },
            {
                profile: "https://github.com/aayush-05",
                image: "https://avatars1.githubusercontent.com/u/47032027?s=96&v=4"
            },
            {
                profile: "https://github.com/Abdelaty",
                image: "https://avatars0.githubusercontent.com/u/23483020?s=96&v=4"
            }


